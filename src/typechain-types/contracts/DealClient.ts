/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export type ExtraParamsV1Struct = {
  location_ref: PromiseOrValue<string>;
  car_size: PromiseOrValue<BigNumberish>;
  skip_ipni_announce: PromiseOrValue<boolean>;
  remove_unsealed_copy: PromiseOrValue<boolean>;
};

export type ExtraParamsV1StructOutput = [
  string,
  BigNumber,
  boolean,
  boolean
] & {
  location_ref: string;
  car_size: BigNumber;
  skip_ipni_announce: boolean;
  remove_unsealed_copy: boolean;
};

export type DealRequestStruct = {
  piece_cid: PromiseOrValue<BytesLike>;
  piece_size: PromiseOrValue<BigNumberish>;
  verified_deal: PromiseOrValue<boolean>;
  label: PromiseOrValue<string>;
  start_epoch: PromiseOrValue<BigNumberish>;
  end_epoch: PromiseOrValue<BigNumberish>;
  storage_price_per_epoch: PromiseOrValue<BigNumberish>;
  provider_collateral: PromiseOrValue<BigNumberish>;
  client_collateral: PromiseOrValue<BigNumberish>;
  extra_params_version: PromiseOrValue<BigNumberish>;
  extra_params: ExtraParamsV1Struct;
};

export type DealRequestStructOutput = [
  string,
  BigNumber,
  boolean,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  ExtraParamsV1StructOutput
] & {
  piece_cid: string;
  piece_size: BigNumber;
  verified_deal: boolean;
  label: string;
  start_epoch: BigNumber;
  end_epoch: BigNumber;
  storage_price_per_epoch: BigNumber;
  provider_collateral: BigNumber;
  client_collateral: BigNumber;
  extra_params_version: BigNumber;
  extra_params: ExtraParamsV1StructOutput;
};

export type RequestIdStruct = {
  requestId: PromiseOrValue<BytesLike>;
  valid: PromiseOrValue<boolean>;
};

export type RequestIdStructOutput = [string, boolean] & {
  requestId: string;
  valid: boolean;
};

export type ProviderSetStruct = {
  provider: PromiseOrValue<BytesLike>;
  valid: PromiseOrValue<boolean>;
};

export type ProviderSetStructOutput = [string, boolean] & {
  provider: string;
  valid: boolean;
};

export interface DealClientInterface extends utils.Interface {
  functions: {
    "AUTHENTICATE_MESSAGE_METHOD_NUM()": FunctionFragment;
    "DATACAP_ACTOR_ETH_ADDRESS()": FunctionFragment;
    "DATACAP_RECEIVER_HOOK_METHOD_NUM()": FunctionFragment;
    "MARKET_ACTOR_ETH_ADDRESS()": FunctionFragment;
    "MARKET_NOTIFY_DEAL_METHOD_NUM()": FunctionFragment;
    "addBalance(uint256)": FunctionFragment;
    "dealRequestIdx(bytes32)": FunctionFragment;
    "dealRequests(uint256)": FunctionFragment;
    "dealsLength()": FunctionFragment;
    "getDealByIndex(uint256)": FunctionFragment;
    "getDealProposal(bytes32)": FunctionFragment;
    "getExtraParams(bytes32)": FunctionFragment;
    "getProposalIdSet(bytes)": FunctionFragment;
    "getProviderSet(bytes)": FunctionFragment;
    "handle_filecoin_method(uint64,uint64,bytes)": FunctionFragment;
    "makeDealProposal((bytes,uint64,bool,string,int64,int64,uint256,uint256,uint256,uint64,(string,uint64,bool,bool)))": FunctionFragment;
    "owner()": FunctionFragment;
    "pieceDeals(bytes)": FunctionFragment;
    "pieceProviders(bytes)": FunctionFragment;
    "pieceRequests(bytes)": FunctionFragment;
    "pieceStatus(bytes)": FunctionFragment;
    "updateActivationStatus(bytes)": FunctionFragment;
    "withdrawBalance(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "AUTHENTICATE_MESSAGE_METHOD_NUM"
      | "DATACAP_ACTOR_ETH_ADDRESS"
      | "DATACAP_RECEIVER_HOOK_METHOD_NUM"
      | "MARKET_ACTOR_ETH_ADDRESS"
      | "MARKET_NOTIFY_DEAL_METHOD_NUM"
      | "addBalance"
      | "dealRequestIdx"
      | "dealRequests"
      | "dealsLength"
      | "getDealByIndex"
      | "getDealProposal"
      | "getExtraParams"
      | "getProposalIdSet"
      | "getProviderSet"
      | "handle_filecoin_method"
      | "makeDealProposal"
      | "owner"
      | "pieceDeals"
      | "pieceProviders"
      | "pieceRequests"
      | "pieceStatus"
      | "updateActivationStatus"
      | "withdrawBalance"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "AUTHENTICATE_MESSAGE_METHOD_NUM",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DATACAP_ACTOR_ETH_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DATACAP_RECEIVER_HOOK_METHOD_NUM",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MARKET_ACTOR_ETH_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MARKET_NOTIFY_DEAL_METHOD_NUM",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addBalance",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "dealRequestIdx",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "dealRequests",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "dealsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDealByIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDealProposal",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getExtraParams",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalIdSet",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProviderSet",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "handle_filecoin_method",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "makeDealProposal",
    values: [DealRequestStruct]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pieceDeals",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "pieceProviders",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "pieceRequests",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "pieceStatus",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateActivationStatus",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBalance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "AUTHENTICATE_MESSAGE_METHOD_NUM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DATACAP_ACTOR_ETH_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DATACAP_RECEIVER_HOOK_METHOD_NUM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MARKET_ACTOR_ETH_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MARKET_NOTIFY_DEAL_METHOD_NUM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dealRequestIdx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dealRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dealsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDealByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDealProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExtraParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalIdSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProviderSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handle_filecoin_method",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeDealProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pieceDeals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pieceProviders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pieceRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pieceStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateActivationStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBalance",
    data: BytesLike
  ): Result;

  events: {
    "DealProposalCreate(bytes32,uint64,bool,uint256)": EventFragment;
    "ReceivedDataCap(string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DealProposalCreate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReceivedDataCap"): EventFragment;
}

export interface DealProposalCreateEventObject {
  id: string;
  size: BigNumber;
  verified: boolean;
  price: BigNumber;
}
export type DealProposalCreateEvent = TypedEvent<
  [string, BigNumber, boolean, BigNumber],
  DealProposalCreateEventObject
>;

export type DealProposalCreateEventFilter =
  TypedEventFilter<DealProposalCreateEvent>;

export interface ReceivedDataCapEventObject {
  received: string;
}
export type ReceivedDataCapEvent = TypedEvent<
  [string],
  ReceivedDataCapEventObject
>;

export type ReceivedDataCapEventFilter = TypedEventFilter<ReceivedDataCapEvent>;

export interface DealClient extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DealClientInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    AUTHENTICATE_MESSAGE_METHOD_NUM(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    DATACAP_ACTOR_ETH_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    DATACAP_RECEIVER_HOOK_METHOD_NUM(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    MARKET_ACTOR_ETH_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    MARKET_NOTIFY_DEAL_METHOD_NUM(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    addBalance(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dealRequestIdx(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { idx: BigNumber; valid: boolean }>;

    dealRequests(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        boolean,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        ExtraParamsV1StructOutput
      ] & {
        piece_cid: string;
        piece_size: BigNumber;
        verified_deal: boolean;
        label: string;
        start_epoch: BigNumber;
        end_epoch: BigNumber;
        storage_price_per_epoch: BigNumber;
        provider_collateral: BigNumber;
        client_collateral: BigNumber;
        extra_params_version: BigNumber;
        extra_params: ExtraParamsV1StructOutput;
      }
    >;

    dealsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDealByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[DealRequestStructOutput]>;

    getDealProposal(
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getExtraParams(
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { extra_params: string }>;

    getProposalIdSet(
      cid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[RequestIdStructOutput]>;

    getProviderSet(
      cid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[ProviderSetStructOutput]>;

    handle_filecoin_method(
      method: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      params: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    makeDealProposal(
      deal: DealRequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pieceDeals(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pieceProviders(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, boolean] & { provider: string; valid: boolean }>;

    pieceRequests(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, boolean] & { requestId: string; valid: boolean }>;

    pieceStatus(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    updateActivationStatus(
      pieceCid: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawBalance(
      client: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  AUTHENTICATE_MESSAGE_METHOD_NUM(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  DATACAP_ACTOR_ETH_ADDRESS(overrides?: CallOverrides): Promise<string>;

  DATACAP_RECEIVER_HOOK_METHOD_NUM(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  MARKET_ACTOR_ETH_ADDRESS(overrides?: CallOverrides): Promise<string>;

  MARKET_NOTIFY_DEAL_METHOD_NUM(overrides?: CallOverrides): Promise<BigNumber>;

  addBalance(
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dealRequestIdx(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean] & { idx: BigNumber; valid: boolean }>;

  dealRequests(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      boolean,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      ExtraParamsV1StructOutput
    ] & {
      piece_cid: string;
      piece_size: BigNumber;
      verified_deal: boolean;
      label: string;
      start_epoch: BigNumber;
      end_epoch: BigNumber;
      storage_price_per_epoch: BigNumber;
      provider_collateral: BigNumber;
      client_collateral: BigNumber;
      extra_params_version: BigNumber;
      extra_params: ExtraParamsV1StructOutput;
    }
  >;

  dealsLength(overrides?: CallOverrides): Promise<BigNumber>;

  getDealByIndex(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<DealRequestStructOutput>;

  getDealProposal(
    proposalId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getExtraParams(
    proposalId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getProposalIdSet(
    cid: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<RequestIdStructOutput>;

  getProviderSet(
    cid: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<ProviderSetStructOutput>;

  handle_filecoin_method(
    method: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    params: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  makeDealProposal(
    deal: DealRequestStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pieceDeals(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pieceProviders(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[string, boolean] & { provider: string; valid: boolean }>;

  pieceRequests(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[string, boolean] & { requestId: string; valid: boolean }>;

  pieceStatus(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<number>;

  updateActivationStatus(
    pieceCid: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawBalance(
    client: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    AUTHENTICATE_MESSAGE_METHOD_NUM(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    DATACAP_ACTOR_ETH_ADDRESS(overrides?: CallOverrides): Promise<string>;

    DATACAP_RECEIVER_HOOK_METHOD_NUM(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MARKET_ACTOR_ETH_ADDRESS(overrides?: CallOverrides): Promise<string>;

    MARKET_NOTIFY_DEAL_METHOD_NUM(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addBalance(
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    dealRequestIdx(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { idx: BigNumber; valid: boolean }>;

    dealRequests(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        boolean,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        ExtraParamsV1StructOutput
      ] & {
        piece_cid: string;
        piece_size: BigNumber;
        verified_deal: boolean;
        label: string;
        start_epoch: BigNumber;
        end_epoch: BigNumber;
        storage_price_per_epoch: BigNumber;
        provider_collateral: BigNumber;
        client_collateral: BigNumber;
        extra_params_version: BigNumber;
        extra_params: ExtraParamsV1StructOutput;
      }
    >;

    dealsLength(overrides?: CallOverrides): Promise<BigNumber>;

    getDealByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<DealRequestStructOutput>;

    getDealProposal(
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getExtraParams(
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getProposalIdSet(
      cid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<RequestIdStructOutput>;

    getProviderSet(
      cid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<ProviderSetStructOutput>;

    handle_filecoin_method(
      method: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      params: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber, string]>;

    makeDealProposal(
      deal: DealRequestStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pieceDeals(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pieceProviders(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, boolean] & { provider: string; valid: boolean }>;

    pieceRequests(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, boolean] & { requestId: string; valid: boolean }>;

    pieceStatus(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<number>;

    updateActivationStatus(
      pieceCid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawBalance(
      client: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "DealProposalCreate(bytes32,uint64,bool,uint256)"(
      id?: PromiseOrValue<BytesLike> | null,
      size?: null,
      verified?: PromiseOrValue<boolean> | null,
      price?: null
    ): DealProposalCreateEventFilter;
    DealProposalCreate(
      id?: PromiseOrValue<BytesLike> | null,
      size?: null,
      verified?: PromiseOrValue<boolean> | null,
      price?: null
    ): DealProposalCreateEventFilter;

    "ReceivedDataCap(string)"(received?: null): ReceivedDataCapEventFilter;
    ReceivedDataCap(received?: null): ReceivedDataCapEventFilter;
  };

  estimateGas: {
    AUTHENTICATE_MESSAGE_METHOD_NUM(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    DATACAP_ACTOR_ETH_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    DATACAP_RECEIVER_HOOK_METHOD_NUM(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MARKET_ACTOR_ETH_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    MARKET_NOTIFY_DEAL_METHOD_NUM(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addBalance(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dealRequestIdx(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dealRequests(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dealsLength(overrides?: CallOverrides): Promise<BigNumber>;

    getDealByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDealProposal(
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExtraParams(
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposalIdSet(
      cid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProviderSet(
      cid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    handle_filecoin_method(
      method: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      params: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    makeDealProposal(
      deal: DealRequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pieceDeals(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pieceProviders(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pieceRequests(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pieceStatus(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateActivationStatus(
      pieceCid: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawBalance(
      client: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    AUTHENTICATE_MESSAGE_METHOD_NUM(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DATACAP_ACTOR_ETH_ADDRESS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DATACAP_RECEIVER_HOOK_METHOD_NUM(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MARKET_ACTOR_ETH_ADDRESS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MARKET_NOTIFY_DEAL_METHOD_NUM(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addBalance(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dealRequestIdx(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dealRequests(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dealsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDealByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDealProposal(
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExtraParams(
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposalIdSet(
      cid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProviderSet(
      cid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    handle_filecoin_method(
      method: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      params: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    makeDealProposal(
      deal: DealRequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pieceDeals(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pieceProviders(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pieceRequests(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pieceStatus(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateActivationStatus(
      pieceCid: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawBalance(
      client: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
