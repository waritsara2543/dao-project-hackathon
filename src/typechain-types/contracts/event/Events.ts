/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  Signer,
  utils,
} from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface EventsInterface extends utils.Interface {
  functions: {};

  events: {
    "EventProposalCreated(uint256,address,string,uint256)": EventFragment;
    "RewardsDistributed(uint256,uint256,uint256,uint256)": EventFragment;
    "VoteRecorded(uint256,address,uint256,uint256)": EventFragment;
    "Voted(uint256,address)": EventFragment;
    "WorkSubmitted(bytes,uint256,address,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EventProposalCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsDistributed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoteRecorded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Voted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WorkSubmitted"): EventFragment;
}

export interface EventProposalCreatedEventObject {
  proposalId: BigNumber;
  creator: string;
  description: string;
  rewardAmount: BigNumber;
}
export type EventProposalCreatedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  EventProposalCreatedEventObject
>;

export type EventProposalCreatedEventFilter =
  TypedEventFilter<EventProposalCreatedEvent>;

export interface RewardsDistributedEventObject {
  proposalId: BigNumber;
  totalRewards: BigNumber;
  winnerReward: BigNumber;
  voterRewards: BigNumber;
}
export type RewardsDistributedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  RewardsDistributedEventObject
>;

export type RewardsDistributedEventFilter =
  TypedEventFilter<RewardsDistributedEvent>;

export interface VoteRecordedEventObject {
  proposalId: BigNumber;
  voter: string;
  campaignId: BigNumber;
  votes: BigNumber;
}
export type VoteRecordedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  VoteRecordedEventObject
>;

export type VoteRecordedEventFilter = TypedEventFilter<VoteRecordedEvent>;

export interface VotedEventObject {
  proposalId: BigNumber;
  voter: string;
}
export type VotedEvent = TypedEvent<[BigNumber, string], VotedEventObject>;

export type VotedEventFilter = TypedEventFilter<VotedEvent>;

export interface WorkSubmittedEventObject {
  cid: string;
  proposalCounter: BigNumber;
  owner: string;
  workDescription: string;
}
export type WorkSubmittedEvent = TypedEvent<
  [string, BigNumber, string, string],
  WorkSubmittedEventObject
>;

export type WorkSubmittedEventFilter = TypedEventFilter<WorkSubmittedEvent>;

export interface Events extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EventsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "EventProposalCreated(uint256,address,string,uint256)"(
      proposalId?: null,
      creator?: null,
      description?: null,
      rewardAmount?: null
    ): EventProposalCreatedEventFilter;
    EventProposalCreated(
      proposalId?: null,
      creator?: null,
      description?: null,
      rewardAmount?: null
    ): EventProposalCreatedEventFilter;

    "RewardsDistributed(uint256,uint256,uint256,uint256)"(
      proposalId?: null,
      totalRewards?: null,
      winnerReward?: null,
      voterRewards?: null
    ): RewardsDistributedEventFilter;
    RewardsDistributed(
      proposalId?: null,
      totalRewards?: null,
      winnerReward?: null,
      voterRewards?: null
    ): RewardsDistributedEventFilter;

    "VoteRecorded(uint256,address,uint256,uint256)"(
      proposalId?: PromiseOrValue<BigNumberish> | null,
      voter?: PromiseOrValue<string> | null,
      campaignId?: PromiseOrValue<BigNumberish> | null,
      votes?: null
    ): VoteRecordedEventFilter;
    VoteRecorded(
      proposalId?: PromiseOrValue<BigNumberish> | null,
      voter?: PromiseOrValue<string> | null,
      campaignId?: PromiseOrValue<BigNumberish> | null,
      votes?: null
    ): VoteRecordedEventFilter;

    "Voted(uint256,address)"(proposalId?: null, voter?: null): VotedEventFilter;
    Voted(proposalId?: null, voter?: null): VotedEventFilter;

    "WorkSubmitted(bytes,uint256,address,string)"(
      cid?: null,
      proposalCounter?: null,
      owner?: null,
      workDescription?: null
    ): WorkSubmittedEventFilter;
    WorkSubmitted(
      cid?: null,
      proposalCounter?: null,
      owner?: null,
      workDescription?: null
    ): WorkSubmittedEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
